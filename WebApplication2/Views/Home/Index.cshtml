@using Microsoft.AspNetCore.Mvc.TagHelpers
@model WebApplication2.ViewModels.ConvertForm
@{
    var currenciesToDisplay = new List<string> { "USD", "ILS", "CAD", "AUD", "GBP" };  // The available currency options for conversion. This list can be changed.
    var numCurrencyToChoose = 3; // Num of currencies that can be converted, this value can be changed.
    var baseC = "EUR"; // If You want to change base You only need to change here and variable _base in Utils
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Currency Converter</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="css/index.css">
</head>
<body>
<div class="container">
    <div id="form-container" class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="text-center mb-4">Currency Converter</h3>
                    <form id="conversion-form">
                        <div class="mb-3">
                            <label for="amount" class="form-label">Amount in @baseC:</label>
                            <input id="amount" name="amount" class="form-control" type="number" step="any">
                            <text> You can't send an amount of 555</text>
                        </div>
                        @for (int i = 1; i <= numCurrencyToChoose; i++)
                        {
                            string currencyIndex = "currency" + i; 
                            <div class="mb-3">
                                <label for=@currencyIndex class="form-label">Currency @i:</label>
                                <select id=@currencyIndex name=@currencyIndex class="form-select">
                                    <option value="" disabled selected>Select a currency</option>
                                    @foreach (var currency in currenciesToDisplay)
                                    {
                                        <option value="@currency">@currency</option>
                                    }
                                </select>
                            </div>
                        }

                        <div class="d-grid">
                            <button type="button" id="submit-btn" class="btn btn-primary">Submit</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div id="result-container" class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 id = "amountMessage" class="text-center mb-4"></h3>
                    <div id="conversion-results"></div>
                    <div class="d-grid mt-4">
                        <button id="return-home-btn" class="btn btn-secondary">Return to Home</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="errorModalLabel">Error</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let oldData = null;
    let currencies = null;
    function changeVisibility(toForm,toResult){
        const formContainer = document.getElementById("form-container");
        const resultContainer = document.getElementById("result-container");
        formContainer.style.display = toForm;
        resultContainer.style.display = toResult;
        resultContainer.scrollIntoView({ behavior: "smooth" });
    }
    document.getElementById("return-home-btn").addEventListener("click",() => changeVisibility("block","none"));
    function showError(message) {
        const errorMessageElement = document.querySelector("#errorModal .modal-body");
        errorMessageElement.textContent = message;
        const errorModal = new bootstrap.Modal(document.getElementById("errorModal"));
        errorModal.show();        
    }
    function displayData(data,amount){
        const conversionResults = document.getElementById("conversion-results");
        conversionResults.innerHTML = "";
        if (data && data.weekValues) {
            const amountMessage = document.getElementById("amountMessage");
            let localBase = "@baseC";
                amountMessage.innerHTML = `Conversion Results For ${amount} ${localBase}`;
            conversionResults.innerHTML = `<table class="table table-bordered text-center">
                    <thead>
                        <tr>
                            <th >Date</th>
                            ${data.currencies.map((currency) => `<th> ${localBase} / ${currency}</th>`).join("")}
                        </tr>
                    </thead>
                    <tbody>
                        ${data.weekValues.map(
                (weekValue,index) => `
                                <tr>
                                            <td class="${index % 2 === 0 ? 'even-row' : 'odd-row'}">${weekValue.date}</td>
                                            ${weekValue.values.map((value) => `<td class="${index % 2 === 0 ? 'even-row' : 'odd-row'}">${(parseFloat(value) * amount).toFixed(3)}</td>`).join("")}
                                </tr>`
            ).join("")}
                    </tbody>
                </table>`;
        } else {
            conversionResults.innerHTML = "<p>No data available for conversion.</p>";
        }
        changeVisibility("none","block")

    }
    function checkIfNotFetch(currenciesType) {
        if (currencies == null)
            return false;
        for (let i = 0; i < currenciesType.length;i++){
            if (!currencies[currenciesType[i]]){
                return false
            }
        }
        return true;
    }
    document.getElementById("submit-btn").addEventListener("click", function () {
        let currenciesType = [];
        let amount = document.getElementById("amount").value;
        let amountAsDouble = parseFloat(amount);
        for (let i = 1 ; i <= @numCurrencyToChoose; i++){
            let temp = document.getElementById(`currency${i}`).value;
            if (temp !== "") {
                currenciesType.push(temp);
            }
        }
        if (amountAsDouble < 0 ){
            showError("Amount cannot be less than 0.");
            return;
        }
        if (amount === "") {
            showError("The amount cannot be empty!");
            return;
        }
        if (currenciesType.length === 0) {
            showError("Please select at least one currency.");
            return;
        }
        
        const formData = {
            amountInEUR: amount,
            currencies:currenciesType
        };
        if (checkIfNotFetch(currenciesType)){
            displayData(oldData,amountAsDouble);
            return;
        }
        fetch("/Home/Convert", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
        })
            .then((response) => {
                if (response.ok) 
                    return response.json();
                if (response.status === 501) {
                    showError("Error in Server");
                    return null;
                }
                else{
                    showError("You cannot choose 555");
                    return null;
                }
            })
            .then((data) => {
                if (data) {
                    displayData(data, amountAsDouble);
                    oldData = data;
                    currencies = {};
                    data.currencies.forEach(currency => currencies[currency] = true);
                }
            })
            .catch((error) => {
                alert("An error occurred: " + error.message);
            });
    });


</script>
</body>
</html>
